actions:
- name: Wait until all expected nodes are connected to the cluster
  bashTest:
    script: |-
      function get_nodes_count() {
        local readonly health_url="$1"
        nodes_count="$(curl -s "${health_url}" | jq '.number_of_nodes')"
        echo "${nodes_count}"
      }

      expected_nodes="${REPLICAS}"

      timeout=300
      health_url="http://${APP_INSTANCE_NAME}-elasticsearch-svc:9200/_cluster/health"
      timeout_time=$(( $(date +%s) + timeout ))

      # Wait for all nodes to join the cluster
      nodes_count="$(get_nodes_count "${health_url}")"
      while [[ "${nodes_count}" -ne "${expected_nodes}" ]] \
          && [[ "$(date +%s)" -le "${timeout_time}" ]]; do
        sleep 3
        nodes_count="$(get_nodes_count "${health_url}")"
      done

      if [[ "${nodes_count}" -eq "${expected_nodes}" ]]; then
        echo "OK - all nodes joined"
      else
        echo "FAIL - nodes count: ${nodes_count}"
      fi
    expect:
      stdout:
        contains: OK - all nodes joined

- name: Wait for green status in the cluster
  bashTest:
    script: |-
      function get_cluster_status() {
        local readonly health_url="$1"
        status="$(curl -s "${health_url}" | jq '.status')"
        echo "${status}"
      }

      timeout=300
      health_url="http://${APP_INSTANCE_NAME}-elasticsearch-svc:9200/_cluster/health"

      timeout_time=$(( $(date +%s) + timeout ))

      # Wait for green status
      status="$(get_cluster_status "${health_url}")"
      while [[ "${status}" != '"green"' ]] \
          && [[ "$(date +%s)" -le "${timeout_time}" ]]; do
        sleep 3
        status="$(get_cluster_status "${health_url}")"
      done

      if [[ "${status}" == '"green"' ]]; then
        echo "OK - green status"
      else
        echo "FAIL - status: ${status}"
      fi
    expect:
      stdout:
        contains: OK - green status

- name: Add a document
  bashTest:
    script: |-
      elastic_url="http://${APP_INSTANCE_NAME}-elasticsearch-svc:9200"
      curl -s -f -X PUT -H 'Content-Type:application/json' -d '{
        "name": "John",
        "surname": "Smith"
      }' "${elastic_url}/employees/person/1"
    expect:
      exitCode:
        equals: 0

- name: Update the document
  bashTest:
    script: |-
      elastic_url="http://${APP_INSTANCE_NAME}-elasticsearch-svc:9200"
      curl -s -f -X POST -H 'Content-Type:application/json' -d '{
        "doc": {
          "lastname": "Jones"
        }
      }' "${elastic_url}/employees/person/1/_update"
    expect:
      exitCode:
        equals: 0

- name: Search for the document
  bashTest:
    script: |-
      elastic_url="http://${APP_INSTANCE_NAME}-elasticsearch-svc:9200"
      curl -s -f "${elastic_url}/_search?q=jones"
    expect:
      stdout:
        contains: "\"name\":\"John\""